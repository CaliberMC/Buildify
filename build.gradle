plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT' apply true
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

jarJar.enable()

reobf {
    jarJar { }
}

tasks.jarJar.finalizedBy('reobfJarJar')
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            args '--existing-mod', "caliber"
            args '--existing-mod', "biomesoplenty"
            args '--existing-mod', "regions-unexplored"
            args '--existing-mod', "natures_canvas"
            args '--existing-mod', "create"
            jvmArgs += '-Dmod.dataGen=true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com'
    }
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.5")) {
        jarJar.ranged(it, "[0.3.5,)")
    }

    implementation fg.deobf("com.calibermc.caliberlib:caliberlib:${caliber_lib_version}-${minecraft_version}") // maven local

    implementation fg.deobf("curse.maven:terrablender-563928:6290448")
    implementation fg.deobf("curse.maven:biomes-o-plenty-220318:6364065")
    implementation fg.deobf("curse.maven:glitchcore-955399:5787839")
    implementation fg.deobf("curse.maven:regions-unexplored-659110:5558225")

    implementation fg.deobf("curse.maven:create-328085:6641603")
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description,
        caliber_version: caliber_version,
        caliber_version_range: caliber_version_range,
        terrablender_version: terrablender_version,
        terrablender_version_range: terrablender_version_range,
        biomesoplenty_version: biomesoplenty_version,
        biomesoplenty_version_range: biomesoplenty_version_range,
        regions_unexplored_version: regions_unexplored_version,
        regions_unexplored_version_range: regions_unexplored_version_range,
        create_version: create_version,
        create_version_range: create_version_range,
        flywheel_version: flywheel_version,
        flywheel_version_range: flywheel_version_range,
        registrate_version: registrate_version,
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

mixin {
    add sourceSets.main, "mixins.buildify.refmap.json"
    config 'mixins.buildify.json'

    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true
    quiet
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact tasks.jarJar
            artifact sourcesJar
            groupId = mod_group_id
            artifactId = mod_id
            version = mod_version
        }
    }
    repositories {
        mavenLocal()
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
